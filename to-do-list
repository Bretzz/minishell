
======================== D O N E =======================
EXPORT	(DONE)
	1. unset the exported variable
	2. without arg do 'env' (DO EXPORT)
NOTE: variables can be 'shell', 'export' or 'enviroment'
(difference between
	'unset pippo; export pippo=tuamamma'
			and
	'unset pippo; export pippo')

check precise command: 'exitt' != 'exit' (DONE)

Invalid Name for vars (only [a-z,A-Z,_] allowed) (DONE)

EXPORT: (DONE)
	norminette ft_export (DONE)
	also var=value to check for valname validity (DONE)
	just use write of size and strichr to print on 'export' (DONE)

echo $var1$var2 ???? (concatenates) (DONE)

minishell% echo "'$a' is $a" (DONE)
'' is 
minishell% echo '$a' is $a (DONE)
$a is

VARS:
	to be fixed:
		$ab? (NOT NEEDED) (DONE)
		$?ab (DONE)

handle quotes (DONE)

VAR EXPANSION: (DONE)
	topiana-@c2r3p6:~/live_projects/github/minishell$ ab=123
	topiana-@c2r3p6:~/live_projects/github/minishell$ echo $ab
	123
	topiana-@c2r3p6:~/live_projects/github/minishell$ ab=65 echo $ab
	123

CURSED COMMAND (BASH): (DONE)
	topiana-@c2r3p6: ls | << prut cat | grep la > pippo; cat pippo
	lalalala
	lololo
	prut
	lalalala (output di 'cat pippo')

<main.c grep main | cat >out | ls | <main.c cat >out2 | pwd 
(DONE)

(DONE)
"mkdir a | grep c": creates the dir and closes the pipe
"grep c | mkdir b": grep is waiting the std in, BUT DIR IS MADE INSTANTLY
(check command priority (when unrelated) in pipe) (ADVANCED)

"touch a | <infile grep a" this should create 'a' (DONE)

"<< LIMITER" witout a command just fills the heredoc (DONE)

---------- (DONE) -----------
topiana-@c2r4p11:~/live_projects/github/minishell$ ab=123
topiana-@c2r4p11:~/live_projects/github/minishell$ << X cat (DONE)
> $ab
> X
123

topiana-@c2r4p11:~/live_projects/github/minishell$ << X cat (DONE)
> $abc'f
> $abc;o
> $abc&g
> X
123'f
123;o
123&g

topiana-@c2r4p11:~/live_projects/github/minishell$ ab=123
topiana-@c2r4p11:~/live_projects/github/minishell$ << 'X' cat (DONE)
$ab
'X'
X
$ab
'X'
topiana-@c2r4p11:~/live_projects/github/minishell$ << X cat (DONE)
$ab
'X'
X
123
'X'
topiana-@c2r4p11:~/live_projects/github/minishell$ << "X 'cat (DONE)
>lol
>X' cat
>X 'cat
(check for leaks)

unclosed quotes and pipes (DONE)

(DONE)
also "ls | > out" redirect inside the pipe and don't write in 'out' (just parsing check)

(DONE)
also unfollowd pipe, ex: 'cat |', does weird stuff:
	waits for a command to be executed after the pipe:
	EXAMPLE:
	topiana-@c2r3p6:~/live_projects/github/minishell$ cat |
	> ps
		PID TTY          TIME CMD
	1774952 pts/1    00:00:00 zsh
	1934700 pts/1    00:00:00 bash
	1938102 pts/1    00:00:00 cat
	1938103 pts/1    00:00:00 ps
	ciao
	as if I just wrote: cat | ps

ENV MANAGEMENT: (DONE) (JUST REALLY BASIC)
	topiana-@c2r3p6:~/live_projects/github/minishell$ unset PWD
	topiana-@c2r3p6:~/live_projects/github/minishell$ pwd
	/nfs/homes/topiana-/live_projects/github/minishell
	topiana-@c2r3p6:~/live_projects/github/minishell$ env | grep PWD
	OLDPWD=/nfs/homes/topiana-/live_projects/github/minishell
	topiana-@c2r3p6:~/live_projects/github/minishell$ cd ..
	topiana-@c2r3p6:~/live_projects/github$ pwd
	/nfs/homes/topiana-/live_projects/github
	topiana-@c2r3p6:~/live_projects/github$ env | grep PWD
	topiana-@c2r3p6:~/live_projects/github$ 

(JUST FOR CRASH-TESTING)
'env -i' removes env from the following program (or not really)
	try: 'env -i ls' in bash

also Ctrl-D in heredoc: (DONE)
	zsh: list wierd stuff (ZSH BULLSHIT)
	bash: warning: here-document at line 4 delimited by end-of-file (wanted `LIMITER')

<< X | grep a (DONE)

"| | |" (DONE)
bash: syntax error near unexpected token `|'

heredoc sighandler: (DONE)
	basic functioning:
		1. Ctrl+D ends the hheredooc with EOF (DONE)
		2. Ctrl+C passes an empty doc (DONE)
	extra features:
		1. clean the "^C" or "^D" (DONE)
		2. (Ctr+D) ask for termination (NOT TRUE)
			2.1 (Ctr+D) warning message (DONE)

SHLVL=3 :))))))))))))))))))))))) (DONE)

<< X cat, close minishell, repeat, (check for old heredoc stuff) (DONE)

temp files or pipes? (spoiler: temp files) (DONE)

(DONE)
cd ~ non funziona. deve cambiare la diectory con home. seems easy enough

(DONE)
minishell% cat
^\
minishell% echo $?
0 (should be 131)
minishell% 

(DONE)
AND HEREDOC IS CORRUPTED AFTER ^\

(DONE) (RECHECK AFTER FT_READLINE IMPLEMENTATION)
(d)quote use gnl please (double free con ctr+D e test altri nterruptions)
	
BASH: (DONE)
	mapascal@c2r3p10:~/sgoinfre/GitHub_School_42/Milestone_3/Minishell$ ls |
	> bash: syntax error: unexpected end of file

(DONE)
if an 'ls' file is present make it so that you can execute it with './ls'
(so that it doesn't overwrite the command). Also:
ACCESS deve controllare se il comando passatoe  una dritacctory
fne\THE DNdeE

(DONE)
(QUICK NOTE: man cd)
(without redoing getcwd() and chdir()) 
REDO: pwd, cd
	(just change the PWD='/global/path/to/folder' variable)
	(beware of errors)
REDO: PWD and CD, just change the variable 'PWD' (not that easy, if unset PWD, pwd still works)

(DONE)
bash-3.2$ echo $
$

(DONE)
cat << EOF + Ctrl-D
/usr/bin/cat: -: Bad file descriptor

(DONE)
VARS:
	$12: prints value of $1, then 2: '2'

pipe da solo non da error (???) (DONE)
ls | grep out; echo $? (DONE)

1. var value length (and varous mallocs) (DONE)
2. var name length (and various mallocs) (DONE)
3. mallocs protections (see funny printfs) (DONE)
	se un malloc fallisce freeiamo quello che dobbiamo freeare
	stampiamo errore;
	e non chiudiamo minishell
4. autocorrezione di ecoh in echo??
	NO
5. builtins should return the exit code wanted
	(DONE)
6. non uscire da minishell con ctrl C --> fai a capo e aggiorna var con valore giusto
7. testare $? - example: unset export (var nn valida) -> 
8. ls | > out (DONE)
	deve creare un file out. out viene tokenizzato come word. pero non viene creato il comando 
	Comando 0:
	arg[0]: ls
	infile: 
	outfile: |
	append flag: 0

ci$ao$"$ciao"$'$ciao' (DONE)

(DONE)
1. cd chiama la funzione chdir che modifica la working directing
prima fa il parsing del path. capire se dobbbiamo fare il parsing prima di chiamare chdir
	NON SERVER
2. le varibili PWD e OLD_PWD vengono modificate da cd e capire come e farlo e implemetalro.e  sistemarlo. e runnarlo. e debuggarlo.
	FATTO
1) ls non deve eseguire l'eseguibile ls nella mia directory ma deve eseguire il comando ls
	FATTO
2) heredoc. dovrebbe creare un nuovo file in TMPDIR. quindi dovrebbe andare a cercare la cartella TMPDIR. Se tmpdir non esiste non so cosa deve fare. crearla?
	NON SERVE
3) implementare F_OK che non gho ben ncapito cosa serva, legato a exec_ve
	FATTO

(DONE) (CHECK FDS)
<main.c grep main | cat >out | ls | <main.c cat >out2 | pwd

(DONE)
bash-3.2$ chmod 000 aaa
bash-3.2$ aaa/bbb/file
bash: aaa/bbb/file: Permission denied
bash-3.2$ echo $?
126

(DONE)
cat | cat | ls (SIGPIE is OK)

minishell% < f1
minishell% < f1 cat (DONE)
minishell: f1: No such file or directory
minishell% echo $?
1
minishell% 

(DONE)
<< X cat >out | <out grep a
(should throw 'bash: out: No such file or directory')

SYNTAX: (DONE)
	1. basics (DONE)
	2. raccata roba (here_docs) (DONE)
	3. check valgrind
	4. extensive testing
NOTES:
	heading whitespace before '#' and exclude if in quotes (DONE)
	outside-quote exclusion in word_check()

isatty!!! disattivare i sigandlers in non tty (DONE)

	(DONE)
	/ * * * * * * * * * * * * * * * * * * * * * * * /
	/		! ! ! REMOVE FT_FREENTF ! ! !			/
	/ * * * * * * * * * * * * * * * * * * * * * * * /

ls > out | <out cat (DONE)

ambiguous redirect (DONE)


MAX_PATH CONSEQUENCES!!! (DONE)

(DONE)
input from file should print only the commands print and the errors (just check bash)

(DONE)
exit 1a:
	exit with Exit Code 2

<out cat >catout | ls >out {DONE}
	prima dell'esecuzione out contiene qualcosa e catout on esiste
	dopo l'esecuzione out contiene ls e catout esiste ma vuoto

(DONE)
norminetted everything, the leak is indeed on childs that don't die in execve, so single commands not found or builtins inside pipes

semicolon (;) is easy (DONE)

(DONE)
topiana-@c2r1p10:~/live_projects/github/minishell$ <out cat >catout | ls >out
topiana-@c2r1p10:~/live_projects/github/minishell$ cat catout 
topiana-@c2r1p10:~/live_projects/github/minishell$ <out <f1 <catout cat
bash: f1: No such file or directory
topiana-@c2r1p10:~/live_projects/github/minishell$ <out <catout cat >w_block >catout
bash: w_block: Permission denied

(DONE)
MAX_PATH per il ft_strlcpy dell'infile (o quando si apre il file nel parsing insomma)

(DONE)
topiana-@c2r5p6:~/live_projects/github/minishell$ echo $=
$=

(DONE)
"=ciao"=PIPPO_IS_ANGRY
=ciao=PIPPO_IS_ANGRY: command not found

(DONE)
cat | << here (FDS APERTI)

(DONE)
export b=ho (did not do it once (g_last_sig not resetted))

(DONE)
ls >> file (permission denied sempre)

(DONE)
cat | cat | cat | ls
sleep 2 | sleep 4 | sleep 6

(DONE)
ogni tanto esce a caso (segnali, readline appeso?)
	(control C sig appeso)

(DONE)
cat
^C
echo $?

(DONE)
HERE_DOC: Ctrl+Z conditional jumps

(DONE)
echo -nnnnn -n
echo -nm pippo

(DONE)
export ciao ciao2= ciao3="" ciao4=aaa
echo $ciao $ciao2 $ciao3 $ciao4

======================== DONE-ish =======================

( ? ? ? LOT'S OF INVALID READS ? ? ? )
minishell% export ciao1 ciao2= ciao3=ciao1 
minishell% export (testato sembra ok)

(DONE)
ciao$"$ciao"$$'$ciao' (JUST $$ PID HANDLING with getpid())

1. tilde clotilde matilde
	FATTO (VORRESTI)
BASH:
	bash-3.2$ unset HOME
	bash-3.2$ echo ~
	/Users/totommi
	bash-3.2$ echo $HOME

	bash-3.2$

(DONE)
ls |
> Ctrl+D
(BUT should exit with Exit Code 2)

(DONE)
echo ciao | "" (SIGPIPE)

(DONE)
echo ciao | ciao| ciap

(DONE)
./minishell 123 (2 errori)

(DONE)
unset PAHT
clear
(leaks)

(DONE)
ls > file1 > file2 > file3 > file4
non crea i file nel mezzo

======================== ONGOING =======================

======================= NORMINETTE ======================

built_ins/	(DONE)
cmds/		(DONE)
parser/		(DONE)
signals/	(DONE)
utils/		(DONE)
	readline/ (excluded)
vars/		(DONE)
main.c		(DONE)

======================== T O D O =======================


update $_

ls |
> asdasda
leaks after command not found

echo hi";"hihi (still treats ';' as a special char)

unset HOME
cd: OLDPWD not set ( ...=_=... )

ls +100 arguments ( ! ! ! CRAHS ! ! ! )

exit -10 (should loop)

riorrganizzazione librerie (libft, mtx, readline)

echo "ciao main* siete dei bei file"
(INVALID READS e stuck in read(3) call)
(con la virgola (main*,) it get stuck)

----------------> EXCLUSIVELY PARSING PROBLEMS <----------------

------------------> EXCLUSIVE EXEC PROBLEMS <------------------

----------------------> MIXED PROBLEMS <-----------------------

----------------------> TO INVESTIGATE <-----------------------

-------------------------> HERE DOC <--------------------------

---------------------------> BONUS <----------------------------

-----------------------> FT_READLINE <------------------------

FIX ARROWS: Up: '^[[A', Down: '^[[B', Right: '^[[C', Left: '^[[D'

allora:
	1. fare che la history sta' direttamente in ft_add_history (DONE)
	2. spezzettare build_safe_line (DONE)
	3. ristrutturare il ragionamento base. (DONE)

thngs to fix:
	1. delete should bring back stuff with him. (fft_memmove)
	2. move forward with arrow right. (write the next char)
	3. deleting line before (if cursor != 0 and end of terminal go top)
		(if the line whent on a new terminal line (as point 4)
		and you're about to delete the last char of that line the
		cursor should go at the beginning of the line before)
	4. go on newline if reached end of terminal. (ADVANCED)

GENERAL:
	1. bind the cursor variable to the write() calls.
	2. difference between 'line' and 'terminal-line'
	3. how do I get the 'window size'?

check leaks for history

--------------------> THINGS TO DISCUSS <--------------------

(FUCK THEM)
topiana-@c2r1p8:~/live_projects/github/minishell$ export var=ciao"pippo        "
topiana-@c2r1p8:~/live_projects/github/minishell$ echo $var | cat -e
topiana-@c2r1p8:~/live_projects/github/minishell$ ciaopippo$

(FUCKE THEM PT.2)
here_doc stores the "docs" in readline history

9. modificare makefile per compilare parser e tokenizer exec
10. minishell tester. 1 file testo con tutti i test. 
	runnare in automatico su bash. creare file out dei risultati
		execve gli dici la shell su cui runnare, e l-output lo mette in append su un file.
		check date creation of file appended is VS date di modifica del file dei test.
		poi famo un diff
		bellali







----------------------> FUNNY STUFF <-----------------------

PIPESTATUS (NOT NECESSARY)
	An array variable de containing a list of
	exit status values from the processes in the most-recently-executed foreground
	pipeline (which may contain only a single command).
(check for hardcoded errors: command not found, builtin errors, others...)

( ! ! ! IGNORE THIS ! ! ! )
CURSED COMMAND (ZSH):
	c2r3p6% ls | << prut cat | grep la | > pippo; cat pippo
	heredoc> lol
	heredoc> alalready excluded?
	heredoc> prut
	playlists
	alalready excluded?
playlist: file found by ls, and grep'd
alalready excluded?: found in heredoc and grep'd
