
======================== D O N E =======================
EXPORT	(DONE)
	1. unset the exported variable
	2. without arg do 'env' (DO EXPORT)
NOTE: variables can be 'shell', 'export' or 'enviroment'
(difference between
	'unset pippo; export pippo=tuamamma'
			and
	'unset pippo; export pippo')

check precise command: 'exitt' != 'exit' (DONE)

Invalid Name for vars (only [a-z,A-Z,_] allowed) (DONE)

EXPORT: (DONE)
	norminette ft_export (DONE)
	also var=value to check for valname validity (DONE)
	just use write of size and strichr to print on 'export' (DONE)

echo $var1$var2 ???? (concatenates) (DONE)

minishell% echo "'$a' is $a" (DONE)
'' is 
minishell% echo '$a' is $a (DONE)
$a is

VARS:
	to be fixed:
		$ab? (NOT NEEDED) (DONE)
		$?ab (DONE)

handle quotes (DONE)

VAR EXPANSION: (DONE)
	topiana-@c2r3p6:~/live_projects/github/minishell$ ab=123
	topiana-@c2r3p6:~/live_projects/github/minishell$ echo $ab
	123
	topiana-@c2r3p6:~/live_projects/github/minishell$ ab=65 echo $ab
	123

CURSED COMMAND (BASH): (DONE)
	topiana-@c2r3p6: ls | << prut cat | grep la > pippo; cat pippo
	lalalala
	lololo
	prut
	lalalala (output di 'cat pippo')

<main.c grep main | cat >out | ls | <main.c cat >out2 | pwd (DONE)

(DONE)
"mkdir a | grep c": creates the dir and closes the pipe
"grep c | mkdir b": grep is waiting the std in, BUT DIR IS MADE INSTANTLY
(check command priority (when unrelated) in pipe) (ADVANCED)

"touch a | <infile grep a" this should create 'a' (DONE)

"<< LIMITER" witout a command just fills the heredoc (DONE)

---------- (DONE) -----------
topiana-@c2r4p11:~/live_projects/github/minishell$ ab=123
topiana-@c2r4p11:~/live_projects/github/minishell$ << X cat (DONE)
> $ab
> X
123

topiana-@c2r4p11:~/live_projects/github/minishell$ << X cat (DONE)
> $abc'f
> $abc;o
> $abc&g
> X
123'f
123;o
123&g

topiana-@c2r4p11:~/live_projects/github/minishell$ ab=123
topiana-@c2r4p11:~/live_projects/github/minishell$ << 'X' cat (DONE)
$ab
'X'
X
$ab
'X'
topiana-@c2r4p11:~/live_projects/github/minishell$ << X cat (DONE)
$ab
'X'
X
123
'X'
topiana-@c2r4p11:~/live_projects/github/minishell$ << "X 'cat (DONE)
>lol
>X' cat
>X 'cat
(check for leaks)

unclosed quotes and pipes (DONE)

(DONE)
also "ls | > out" redirect inside the pipe and don't write in 'out' (just parsing check)

(DONE)
also unfollowd pipe, ex: 'cat |', does weird stuff:
	waits for a command to be executed after the pipe:
	EXAMPLE:
	topiana-@c2r3p6:~/live_projects/github/minishell$ cat |
	> ps
		PID TTY          TIME CMD
	1774952 pts/1    00:00:00 zsh
	1934700 pts/1    00:00:00 bash
	1938102 pts/1    00:00:00 cat
	1938103 pts/1    00:00:00 ps
	ciao
	as if I just wrote: cat | ps

ENV MANAGEMENT: (DONE)
	topiana-@c2r3p6:~/live_projects/github/minishell$ unset PWD
	topiana-@c2r3p6:~/live_projects/github/minishell$ pwd
	/nfs/homes/topiana-/live_projects/github/minishell
	topiana-@c2r3p6:~/live_projects/github/minishell$ env | grep PWD
	OLDPWD=/nfs/homes/topiana-/live_projects/github/minishell
	topiana-@c2r3p6:~/live_projects/github/minishell$ cd ..
	topiana-@c2r3p6:~/live_projects/github$ pwd
	/nfs/homes/topiana-/live_projects/github
	topiana-@c2r3p6:~/live_projects/github$ env | grep PWD
	topiana-@c2r3p6:~/live_projects/github$ 

(JUST FOR CRASH-TESTING)
'env -i' removes env from the following program (or not really)
	try: 'env -i ls' in bash

also Ctrl-D in heredoc: (DONE)
	zsh: list wierd stuff (ZSH BULLSHIT)
	bash: warning: here-document at line 4 delimited by end-of-file (wanted `LIMITER')

<< X | grep a (DONE)

<< X cat >out | <out grep a (DONE)

"| | |" (DONE)
bash: syntax error near unexpected token `|'

heredoc sighandler: (DONE)
	basic functioning:
		1. Ctrl+D ends the hheredooc with EOF (DONE)
		2. Ctrl+C passes an empty doc (DONE)
	extra features:
		1. clean the "^C" or "^D" (DONE)
		2. (Ctr+D) ask for termination (NOT TRUE)
			2.1 (Ctr+D) warning message (DONE)

SHLVL=3 :))))))))))))))))))))))) (DONE)

<< X cat, close minishell, repeat, (check for old heredoc stuff) (DONE)

temp files or pipes? (spoiler: temp files) (DONE)

(DONE)
cd ~ non funziona. deve cambiare la diectory con home. seems easy enough

(DONE)
minishell% cat
^\
minishell% echo $?
0 (should be 131)
minishell% 

(DONE)
AND HEREDOC IS CORRUPTED AFTER ^\

(DONE) ( ! ! ! CHECK LEAKS ! ! ! )
dquote use gnl please (double free con ctr+D e test altri nterruptions)
	
BASH: (DONE)
	mapascal@c2r3p10:~/sgoinfre/GitHub_School_42/Milestone_3/Minishell$ ls |
	> bash: syntax error: unexpected end of file

(DONE)
if an 'ls' file is present make it so that you can execute it with './ls'
(so that it doesn't overwrite the command). Also:
ACCESS deve controllare se il comando passatoe  una dritacctory
fne\THE DNdeE

======================== ONGOING =======================

( ! ! ! CHECK LEAKS ! ! ! )
(without redoing getcwd() and chdir())
REDO: pwd, cd
	(just change the PWD='/global/path/to/folder' variable)
	(beware of errors)
REDO: PWD and CD, just change the variable 'PWD' (not that easy, if unset PWD, pwd still works)

SYNTAX:
	1. basics (DONE)
	2. raccata roba (here_docs)
	3. check valgrind
	4. extensive testing
NOTES:
	heading whitespace before '#' and exclude if in quotes (DONE)
	outside-quote exclusion in word_check()

======================== T O D O =======================

	/ * * * * * * * * * * * * * * * * * * * * * * * /
	/		! ! ! REMOVE FT_FREENTF ! ! !			/
	/ * * * * * * * * * * * * * * * * * * * * * * * /

------------------> EXCLUSIVELY PARSING PROBLEMS <------------------

------------------> EXCLUSIVE EXEC PROBLEMS <------------------

PIPESTATUS (NOT NECESSARY)
	An array variable de containing a list of
	exit status values from the processes in the most-recently-executed foreground
	pipeline (which may contain only a single command).
(check for hardcoded errors: command not found, builtin errors, others...)

EXTRA (FAKE NEWS)
	"cd ..; pwd" changes dir
	"pwd; cd .." doesn't

----------------------> MIXED PROBLEMS <-----------------------

bash-3.2$ echo $
$

----------------------> TO INVESTIGATE <-----------------------

VARS:
	$12: prints value of $1, then 2: '2'

----------------------> FUNNY STUFF <-----------------------

CURSED COMMAND (ZSH):
	c2r3p6% ls | << prut cat | grep la | > pippo; cat pippo
	heredoc> lol
	heredoc> alalready excluded?
	heredoc> prut
	playlists
	alalready excluded?
playlist: file found by ls, and grep'd
alalready excluded?: found in heredoc and grep'd

----------------------> HERE DOC <-----------------------

here_doc(NULL) returns string to add to line for history

----------------------> FT_READLINE <-----------------------

FIX ARROWS: Up: '^[[A', Down: '^[[B', Right: '^[[C', Left: '^[[D'

-------------------> THINGS TO DISCUSS <-------------------

1. var value length (and varous mallocs) (DONE)
2. var name length (and various mallocs) (DONE)
3. mallocs protections (see funny printfs) 
	se un malloc fallisce freeiamo quello che dobbiamo freeare
	stampiamo errore;
	e non chiudiamo minishell
4. autocorrezione di ecoh in echo??
	NO
5. builtins should return the exit code wanted
	(DONE)
6. non uscire da minishell con ctrl C --> fai a capo e aggiorna var con valore giusto
7. testare $? - example: unset export (var nn valida) -> 
8. ls | > out (DONE)
	deve creare un file out. out viene tokenizzato come word. pero non viene creato il comando 
	Comando 0:
	arg[0]: ls
	infile: 
	outfile: |
	append flag: 0
9. modificare makefile per compilare parser e tokenizer exec
10. minishell tester. 1 file testo con tutti i test. 
	runnare in automatico su bash. creare file out dei risultati
		execve gli dici la shell su cui runnare, e l-output lo mette in append su un file.
		check date creation of file appended is VS date di modifica del file dei test.
		poi famo un diff
		bellali





pipe da solo non da error (???)
ls | grep out; echo $?
ciao$"$ciao"$$'$ciao
ci$ao$"$ciao"$'$ciao'



1. cd chiama la funzione chdir che modifica la working directing
prima fa il parsing del path. capire se dobbbiamo fare il parsing prima di chiamare chdir

2. le varibili PWD e OLD_PWD vengono modificate da cd e capire come e farlo e implemetalro.e  sistemarlo. e runnarlo. e debuggarlo.

1) ls non deve eseguire l'eseguibile ls nella mia directory ma deve eseguire il comando ls
	FATTO
2) heredoc. dovrebbe creare un nuovo file in TMPDIR. quindi dovrebbe andare a cercare la cartella TMPDIR. Se tmpdir non esiste non so cosa deve fare. crearla?
	NON SERVE
3) implementare F_OK che non gho ben ncapito cosa serva, legato a exec_ve
	FATTO


tilde clotilde matilde
	FATTO
